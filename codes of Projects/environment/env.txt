`include "transactor.sv"
`include "generator.sv"
`include "driver.sv"
`include "monitor.sv"
`include "scoreboard.sv"

// Environment Class
class environment;
  generator gen;
  driver driv;
  monitor rcv;
  scoreboard sb;
  mailbox #(transactor) gen2driv;  // Initialize mailboxes with the correct type
  mailbox #(transactor) rcv2sb;
  virtual fifo_if vif_ff;
  function new (virtual fifo_if vif_ff);
  this.vif_ff = vif_ff;
  endfunction

  // Build environment
  task build();
    gen2driv = new();         // Initialize the mailboxes
    rcv2sb = new();
    gen = new(gen2driv);      // Pass the mailbox to the generator
    driv = new(vif_ff, gen2driv);  // Pass the interface and mailbox to driver
    rcv = new(vif_ff, rcv2sb);     // Pass the interface and mailbox to monitor
    sb = new(gen2driv, rcv2sb);    // Pass mailboxes to scoreboard
  endtask

  // Pre-test reset
  task pre_test();
    driv.reset();  // Reset the driver to initialize the simulation state
  endtask

  // Test execution
  task test();
    fork
      gen.main();   // Generate transactions
      driv.main();  // Driver executes
      rcv.start();  // Monitor starts
      sb.start();   // Scoreboard starts
    join
  endtask

  // Run simulation
  task run();
    pre_test();
    test();
    $finish();  // Finish the simulation
  endtask
endclass

